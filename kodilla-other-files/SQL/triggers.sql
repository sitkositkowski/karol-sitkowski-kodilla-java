CREATE TABLE RENTS_AUD
(
    EVENT_ID        INT(11)  NOT NULL AUTO_INCREMENT,
    EVENT_DATE      DATETIME NOT NULL,
    EVENT_TYPE      VARCHAR(10) DEFAULT NULL,
    RENT_ID         INT(11)  NOT NULL,
    OLD_BOOK_ID     INT(11),
    NEW_BOOK_ID     INT(11),
    OLD_READER_ID   INT(11),
    NEW_READER_ID   INT(11),
    OLD_RENT_DATE   DATETIME,
    NEW_RENT_DATE   DATETIME,
    OLD_RETURN_DATE DATETIME,
    NEW_RETURN_DATE DATETIME,
    PRIMARY KEY (EVENT_ID)
);

DELIMITER $$

CREATE TRIGGER RENTS_INSERT AFTER INSERT ON RENTS                                        -- [1]
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, NEW_BOOK_ID, NEW_READER_ID,   -- [2]
                           NEW_RENT_DATE, NEW_RETURN_DATE)                                -- [3]
        VALUE(CURTIME(), 'INSERT', NEW.RENT_ID, NEW.BOOK_ID, NEW.READER_ID, NEW.RENT_DATE, -- [4]
              NEW.RETURN_DATE);                                                            -- [5]
END $$

DELIMITER ;

INSERT INTO RENTS (BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (2, 4, CURDATE() - 7, NULL);

COMMIT;

SELECT * FROM RENTS_AUD;

DELIMITER $$

CREATE TRIGGER RENTS_DELETE AFTER DELETE ON RENTS          -- [1]
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID) -- [2]
        VALUE(CURTIME(), 'DELETE', OLD.RENT_ID);             -- [3]
END $$

DELIMITER ;

DELETE FROM RENTS WHERE RENT_ID = 12;

COMMIT;

DROP TRIGGER IF EXISTS RENTS_UPDATE;

DELIMITER $$

CREATE TRIGGER RENTS_UPDATE AFTER UPDATE ON RENTS
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, NEW_BOOK_ID, NEW_READER_ID,
                           NEW_RENT_DATE, NEW_RETURN_DATE, OLD_BOOK_ID, OLD_READER_ID,
                           OLD_RENT_DATE, OLD_RETURN_DATE)
        VALUE(CURTIME(), 'UPDATE', OLD.RENT_ID, NEW.BOOK_ID, NEW.READER_ID,
              NEW.RENT_DATE, NEW.RETURN_DATE, OLD.BOOK_ID, OLD.READER_ID,
              OLD.RENT_DATE, OLD.RETURN_DATE);
END $$

DELIMITER ;

SELECT * FROM RENTS;

UPDATE RENTS SET RETURN_DATE = CURDATE()
WHERE RENT_ID = 11;

COMMIT;


CREATE TABLE BOOKS_AUD
(
    EVENT_ID        INT(11)  NOT NULL AUTO_INCREMENT,
    EVENT_DATE      DATETIME NOT NULL,
    EVENT_TYPE      VARCHAR(10) DEFAULT NULL,
    BOOK_ID         INT(11)  NOT NULL,
    OLD_TITLE     VARCHAR(255),
    NEW_TITLE     VARCHAR(255),
    OLD_PUBYEAR   INT(4),
    NEW_PUBYEAR   INT(4),
    OLD_BESTSELLER BOOLEAN,
    NEW_BESTSELLER BOOLEAN,
    PRIMARY KEY (EVENT_ID)
);

DROP TRIGGER IF EXISTS BOOKS_INSERT;

DELIMITER $$

CREATE TRIGGER BOOKS_INSERT AFTER INSERT ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR, NEW_BESTSELLER)
        VALUE(CURTIME(), 'INSERT', NEW.BOOK_ID, NEW.BOOK_ID, NEW.PUBYEAR, NEW.BESTSELLER);
END $$

DELIMITER ;

DROP TRIGGER IF EXISTS BOOKS_DELETE;

DELIMITER $$

CREATE TRIGGER BOOKS_DELETE AFTER DELETE ON BOOKS          -- [1]
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID) -- [2]
        VALUE(CURTIME(), 'DELETE', OLD.BOOK_ID);             -- [3]
END $$

DELIMITER ;


DROP TRIGGER IF EXISTS BOOKS_UPDATE;

DELIMITER $$

CREATE TRIGGER BOOKS_UPDATE AFTER UPDATE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE,
                           NEW_PUBYEAR, NEW_BESTSELLER, OLD_TITLE, OLD_PUBYEAR, OLD_BESTSELLER)
        VALUE(CURTIME(), 'UPDATE', OLD.BOOK_ID, NEW.TITLE, NEW.PUBYEAR, NEW_BESTSELLER, OLD.TITLE,
              OLD.PUBYEAR, OLD.BESTSELLER);
END $$

DELIMITER ;

SELECT * FROM BOOKS;

INSERT INTO BOOKS (TITLE, PUBYEAR)
VALUES ('The Old Man and the Sea', 1951);
COMMIT;
SELECT * FROM BOOKS;
SELECT * FROM BOOKS_AUD;

UPDATE BOOKS SET BESTSELLER = TRUE
WHERE BOOK_ID = 6;
COMMIT;
SELECT * FROM BOOKS;
SELECT * FROM BOOKS_AUD;

DELETE FROM BOOKS WHERE BOOK_ID = 6;
COMMIT;
SELECT * FROM BOOKS;
SELECT * FROM BOOKS_AUD;

CREATE TABLE READERS_AUD
(
    EVENT_ID        INT(11)  NOT NULL AUTO_INCREMENT,
    EVENT_DATE      DATETIME NOT NULL,
    EVENT_TYPE      VARCHAR(10) DEFAULT NULL,
    READER_ID         INT(11)  NOT NULL,
    OLD_FIRSTNAME     VARCHAR(255),
    NEW_FIRSTNAME     VARCHAR(255),
    OLD_LASTNAME     VARCHAR(255),
    NEW_LASTNAME     VARCHAR(255),
    OLD_PESELID   VARCHAR(11),
    NEW_PESELID   VARCHAR(11),
    OLD_VIP_LEVEL VARCHAR(20),
    NEW_VIP_LEVEL VARCHAR(20),
    PRIMARY KEY (EVENT_ID)
);

DROP TRIGGER IF EXISTS READERS_INSERT;

DELIMITER $$

CREATE TRIGGER READERS_INSERT AFTER INSERT ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESELID, NEW_VIP_LEVEL)
        VALUE(CURTIME(), 'INSERT', NEW.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL);
END $$

DELIMITER ;

DROP TRIGGER IF EXISTS READERS_DELETE;

DELIMITER $$

CREATE TRIGGER READERS_DELETE AFTER DELETE ON READERS          -- [1]
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID) -- [2]
        VALUE(CURTIME(), 'DELETE', OLD.READER_ID);             -- [3]
END $$

DELIMITER ;


DROP TRIGGER IF EXISTS READERS_UPDATE;

DELIMITER $$

CREATE TRIGGER READERS_UPDATE AFTER UPDATE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESELID, NEW_VIP_LEVEL,
                             OLD_FIRSTNAME, OLD_LASTNAME, OLD_PESELID, OLD_VIP_LEVEL)
        VALUE(CURTIME(), 'UPDATE', OLD.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL,
              OLD.FIRSTNAME, OLD.LASTNAME, OLD.PESELID, OLD.VIP_LEVEL);
END $$

DELIMITER ;

SELECT * FROM READERS;

INSERT INTO READERS (FIRSTNAME, LASTNAME, PESELID)
VALUES ('Jack','Wilshare','90120603230');
COMMIT;
SELECT * FROM READERS;
SELECT * FROM READERS_AUD;

UPDATE READERS SET VIP_LEVEL = 'Standard customer'
WHERE READER_ID = 7;
COMMIT;
SELECT * FROM READERS;
SELECT * FROM READERS_AUD;

DELETE FROM READERS WHERE READER_ID = 6;
COMMIT;
SELECT * FROM READERS;
SELECT * FROM READERS_AUD;